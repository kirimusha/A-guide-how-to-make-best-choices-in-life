# -*- coding: utf-8 -*-
"""bride_task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j6MzurakB44b8edXIyGZjJKu497mxfPU
"""

import itertools
import matplotlib.pyplot as plt
import math

# код, который показывает зависимость к
# - количества отброшенных вариантов - от количества всех
# кандидатов из задачи о выборе невесты/арбуза/телевизора

# эта функция возвращает True, если удаётся выбрать лучший вариант
# в определённой перестановке кандидатов/очереди выбора товаров
def success_strategy(perm, k_rejected):
    best = -1

    for i in range(k_rejected):
        if perm[i] > best:
            best = perm[i]
    for i in range(k_rejected, len(perm)):
        if perm[i] > best:
            if perm[i] == len(perm):
                return True
            return False
    return False


# функция, которая возвращает оптимальное значение к
# - количество кандидатов/вариантов, которые мы отвергаем
def optimal_k(n):
    '''best_k = 0
    best_p = 0

    for k_rejected in range(n):
        success = sum(success_strategy(p, k_rejected) for p in itertools.permutations(range(1, n+1)))
        total = math.factorial(n)
        p = success / total

        if p > best_p:
            best_k, best_p = k_rejected, p

    return best_k'''

    return round(n/math.e)

# найдём координатты точек

n_list = list(range(2, 1000))
k_list = []

for n in n_list:
    k = optimal_k(n)
    k_list.append(k)

    # print(f"n={n}, k={k}")

# построим график

plt.plot(n_list, k_list)
plt.xlabel("n")
plt.ylabel("k")
plt.title("Оптимальная стратегия задачи о выборе невесты/телевизора/арбуза")
plt.grid(True)
plt.show()